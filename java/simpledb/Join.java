package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate predicate;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc td1, td2;
    private TupleDesc comboTD;
    private Tuple currentChild1Tuple;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
        td1 = child1.getTupleDesc();
        td2 = child2.getTupleDesc();
        comboTD = TupleDesc.merge(td1,td2);
        currentChild1Tuple = null;

    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return ("table1." + td1.getFieldName(predicate.getField1()));
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return ("table2." + td2.getFieldName(predicate.getField2()));
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return comboTD;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
        currentChild1Tuple = null;
    }

    public void close() {
        // some code goes here
        super.close();
        child2.close();
        child1.close();
        currentChild1Tuple = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        currentChild1Tuple = null;
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        TupleDesc newTd = getTupleDesc();
        Tuple newTup = new Tuple(newTd);
        int i = 0;

        if (child1 == null || child2 == null)
            return null;
        if (currentChild1Tuple == null) {
            if  (child1.hasNext()) {
                // get first tuple from child1
                currentChild1Tuple = child1.next();
//    		System.out.println("Child1 Tuple :" + currentChild1Tuple.toString());
            }
            // no more tuple from child1
            else return null;
        }

        while (true) {
            while (child2.hasNext() ) {
                Tuple t2 = child2.next();
//            	System.out.println("Child2 Tuple :" + t2.toString());
                if (predicate.filter(currentChild1Tuple, t2)) {
                    // set the fields for newTuple
                    for (i=0; i < td1.numFields(); i++)
                        newTup.setField(i, currentChild1Tuple.getField(i));
                    for (int j=0; j < td2.numFields(); j++)
                        newTup.setField(i+j, t2.getField(j));
                    // System.out.println("New Tuple : " + newTup.toString());
                    return newTup;
                }
                continue;
            }
            // child1 point to current tuple but child2 does not have next; advance child1 tuple
            if (child1.hasNext()) {
                currentChild1Tuple = child1.next();
//        		System.out.println("Child1 Tuple :" + currentChild1Tuple.toString());
            }
            else return null;
            // rewind child2 and continue
            child2.rewind();
        }
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = new DbIterator[2];
        children[0] = child1;
        children[1] = child2;
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }

}
